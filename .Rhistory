d2 <- (m2 - moments[2])^2
}
if(!is.na(moments[3])){
d3 <- (m3 - moments[3])^2
}
if(!is.na(moments[4])){
d4 <- (m4 - moments[4])^2
}
d1
d2
d3
d4
?optim
moments_requested
par0 <- c(0, 0, 0, 1)[moments_requested]
f2opt <- function(par, moments, mu=NA, delta=NA, beta=NA, alpha=NA){
if(is.na(mu)) mu <- par[1]
if(is.na(delta)) delta <- exp(par[2])
if(is.na(beta)) beta <- par[3]
if(is.na(alpha)) alpha <- par[4]
if(alpha^2 < beta^2) return(1e7)
gamma <- sqrt(alpha^2 - beta^2)
m1 <- mu + delta*beta/gamma
m2 <- delta*alpha^2/gamma^3
m3 <- 3*beta/(alpha*sqrt(delta*gamma))
m4 <- 3 + 3*(1 + 4*beta^2)/(alpha^2*delta*gamma)
d1 <- d2 <- d3 <- d4 <- 0
if(!is.na(moments[1])){
d1 <- (m1 - moments[1])^2
}
if(!is.na(moments[2])){
d2 <- (m2 - moments[2])^2
}
if(!is.na(moments[3])){
d3 <- (m3 - moments[3])^2
}
if(!is.na(moments[4])){
d4 <- (m4 - moments[4])^2
}
return(d1 + d2 + d3 + d4)
}
optim(par0, fn=f2opt)
optim(par0, fn=f2opt, mu=mu, delta=delta)
beta
beta = NA
alpha = NA
optim(par0, fn=f2opt, mu=mu, delta=delta, beta=beta, alpha=alpha)
par = par0
stats
stats[1:2] <- NA
optim(par0, fn=f2opt, moments= stats, mu=mu, delta=delta, beta=beta, alpha=alpha)
moments = stats
par
par = par0
par
par0 <- c(0, 0, 0, 1)
optim(par0, fn=f2opt, moments= stats, mu=mu, delta=delta, beta=beta, alpha=alpha)
f2opt <- function(par, moments, mu=NA, delta=NA, beta=NA, alpha=NA){
cnt <- 1
if(is.na(mu)){
mu <- par[cnt]
cnt <- cnt + 1
}
if(is.na(delta)){
delta <- exp(par[cnt])
cnt <- cnt + 1
}
if(is.na(beta)){
beta <- par[cnt]
cnt <- cnt + 1
}
if(is.na(alpha)){
alpha <- par[cnt]
}
if(alpha^2 < beta^2) return(1e7)
gamma <- sqrt(alpha^2 - beta^2)
m1 <- mu + delta*beta/gamma
m2 <- delta*alpha^2/gamma^3
m3 <- 3*beta/(alpha*sqrt(delta*gamma))
m4 <- 3 + 3*(1 + 4*beta^2)/(alpha^2*delta*gamma)
d1 <- d2 <- d3 <- d4 <- 0
if(!is.na(moments[1])){
d1 <- (m1 - moments[1])^2
}
if(!is.na(moments[2])){
d2 <- (m2 - moments[2])^2
}
if(!is.na(moments[3])){
d3 <- (m3 - moments[3])^2
}
if(!is.na(moments[4])){
d4 <- (m4 - moments[4])^2
}
return(d1 + d2 + d3 + d4)
}
par0 <- c(0, 0, 0, 1)[moments_requested]
optim(par0, fn=f2opt, moments= stats, mu=mu, delta=delta, beta=beta, alpha=alpha)
mu
delta
beta
alpha
par <- c(21.17, 21.49)
moments
cnt <- 1
if(is.na(mu)){
mu <- par[cnt]
cnt <- cnt + 1
}
if(is.na(delta)){
delta <- exp(par[cnt])
cnt <- cnt + 1
}
if(is.na(beta)){
beta <- par[cnt]
cnt <- cnt + 1
}
if(is.na(alpha)){
alpha <- par[cnt]
}
gamma <- sqrt(alpha^2 - beta^2)
alpha
beta
delta
mu
m1 <- mu + delta*beta/gamma
m2 <- delta*alpha^2/gamma^3
m3 <- 3*beta/(alpha*sqrt(delta*gamma))
m4 <- 3 + 3*(1 + 4*beta^2)/(alpha^2*delta*gamma)
m1
m2
m3
m4
moments
d1 <- d2 <- d3 <- d4 <- 0
if(!is.na(moments[1])){
d1 <- (m1 - moments[1])^2
}
d1
if(!is.na(moments[2])){
d2 <- (m2 - moments[2])^2
}
d2
if(!is.na(moments[3])){
d3 <- (m3 - moments[3])^2
}
d3
moments[3]
m3
moments[4]
m4
fit <- optim(par0, fn=f2opt, moments= stats, mu=mu, delta=delta, beta=beta, alpha=alpha)
fit
cnt <- 1
if(1 %in% moments_requested){
mu <- fit$par[cnt]
cnt <- cnt + 1
}
if(2 %in% moments_requested){
delta <- exp(fit$par[cnt])
cnt <- cnt + 1
}
if(3 %in% moments_requested){
beta <- fit$par[cnt]
cnt <- cnt + 1
}
if(4 %in% moments_requested){
alpha <- abs(fit$par[cnt])
cnt <- cnt + 1
}
mu
delta
alpha
beta
moments_requested
3 %in% moments_requested
fit$par
fit
par0 <- c(0, 0, 0, 1)[moments_requested]
fit <- optim(par0, fn=f2opt, moments= stats, mu=mu, delta=delta, beta=beta, alpha=alpha, ...)
res <- c(mu, delta, beta, alpha)
names(res) <- c("mu", "delta", "beta", "alpha")
res
#' @param beta skewness parameter, if fixed
#' @param delta scale parameter, if fixed
#' @param triangle logical. When TRUE, only the steepness and asymmetry values are returned.
#' @param ... additional parameters passed to optim.
#' @return estimated parameters
#' @details Method of moments estimators for NW parameters. The stats vector can contain NA values when parameters are fixed. If the mean is to be estimated, then \code{stats[1]} must be provided.
#' @import Matrix
#' @export
#' @examples
#' #not yet
nw_est_mom <- function(data=NULL, stats=NULL,
mu=NA, delta=NA, beta=NA, alpha=NA,
triangle=FALSE){
if(!is.null(data)){
zdata <- (data-mean(data))/sd(data)
stats <- c(mean(data), var(data), mean(zdata^3), mean(zdata^4))
}
# Figure out which moments to use
moments_requested <- which(c(is.na(mu), is.na(delta), is.na(beta), is.na(alpha)))
moments_provided  <- which(!is.na(stats))
if(length(moments_requested) > length(moments_provided)){
stop("Need more moments to estimate desired parameters")
}
if(moments_requested[1] == 1 & moments_provided[1] != 1){
stop("Cannot estimate mu without sample mean")
}
f2opt <- function(par, moments, mu=NA, delta=NA, beta=NA, alpha=NA, ...){
cnt <- 1
if(is.na(mu)){
mu <- par[cnt]
cnt <- cnt + 1
}
if(is.na(delta)){
delta <- exp(par[cnt])
cnt <- cnt + 1
}
if(is.na(beta)){
beta <- par[cnt]
cnt <- cnt + 1
}
if(is.na(alpha)){
alpha <- par[cnt]
}
if(alpha^2 < beta^2) return(1e7)
gamma <- sqrt(alpha^2 - beta^2)
m1 <- mu + delta*beta/gamma
m2 <- delta*alpha^2/gamma^3
m3 <- 3*beta/(alpha*sqrt(delta*gamma))
m4 <- 3 + 3*(1 + 4*beta^2)/(alpha^2*delta*gamma)
d1 <- d2 <- d3 <- d4 <- 0
if(!is.na(moments[1])){
d1 <- (m1 - moments[1])^2
}
if(!is.na(moments[2])){
d2 <- (m2 - moments[2])^2
}
if(!is.na(moments[3])){
d3 <- (m3 - moments[3])^2
}
if(!is.na(moments[4])){
d4 <- (m4 - moments[4])^2
}
return(d1 + d2 + d3 + d4)
}
par0 <- c(0, 0, 0, 1)[moments_requested]
fit <- optim(par0, fn=f2opt, moments= stats, mu=mu, delta=delta, beta=beta, alpha=alpha, ...)
if(fit$convergence != 0) warning("Optim may not have converged.")
cnt <- 1
if(1 %in% moments_requested){
mu <- fit$par[cnt]
cnt <- cnt + 1
}
if(2 %in% moments_requested){
delta <- exp(fit$par[cnt])
cnt <- cnt + 1
}
if(3 %in% moments_requested){
beta <- fit$par[cnt]
cnt <- cnt + 1
}
if(4 %in% moments_requested){
alpha <- abs(fit$par[cnt])
cnt <- cnt + 1
}
res <- c(mu, delta, beta, alpha)
names(res) <- c("mu", "delta", "beta", "alpha")
return(res)
}
mu
delta
beta <- NA
alpha <- NA
stats
# Figure out which moments to use
moments_requested <- which(c(is.na(mu), is.na(delta), is.na(beta), is.na(alpha)))
moments_provided  <- which(!is.na(stats))
moments_provided
moments_requested
if(length(moments_requested) > length(moments_provided)){
stop("Need more moments to estimate desired parameters")
}
if(moments_requested[1] == 1 & moments_provided[1] != 1){
stop("Cannot estimate mu without sample mean")
}
f2opt <- function(par, moments, mu=NA, delta=NA, beta=NA, alpha=NA, ...){
cnt <- 1
if(is.na(mu)){
mu <- par[cnt]
cnt <- cnt + 1
}
if(is.na(delta)){
delta <- exp(par[cnt])
cnt <- cnt + 1
}
if(is.na(beta)){
beta <- par[cnt]
cnt <- cnt + 1
}
if(is.na(alpha)){
alpha <- par[cnt]
}
if(alpha^2 < beta^2) return(1e7)
gamma <- sqrt(alpha^2 - beta^2)
m1 <- mu + delta*beta/gamma
m2 <- delta*alpha^2/gamma^3
m3 <- 3*beta/(alpha*sqrt(delta*gamma))
m4 <- 3 + 3*(1 + 4*beta^2)/(alpha^2*delta*gamma)
d1 <- d2 <- d3 <- d4 <- 0
if(!is.na(moments[1])){
d1 <- (m1 - moments[1])^2
}
if(!is.na(moments[2])){
d2 <- (m2 - moments[2])^2
}
if(!is.na(moments[3])){
d3 <- (m3 - moments[3])^2
}
if(!is.na(moments[4])){
d4 <- (m4 - moments[4])^2
}
return(d1 + d2 + d3 + d4)
}
par0 <- c(0, 0, 0, 1)[moments_requested]
par0
mu
delta
alpha
beta
fit <- optim(par0, fn=f2opt, moments= stats, mu=mu, delta=delta, beta=beta, alpha=alpha, ...)
fit <- optim(par0, fn=f2opt, moments= stats, mu=mu, delta=delta, beta=beta, alpha=alpha)
fit
fit$convergence
cnt <- 1
if(1 %in% moments_requested){
mu <- fit$par[cnt]
cnt <- cnt + 1
}
if(2 %in% moments_requested){
delta <- exp(fit$par[cnt])
cnt <- cnt + 1
}
if(3 %in% moments_requested){
beta <- fit$par[cnt]
cnt <- cnt + 1
}
if(4 %in% moments_requested){
alpha <- abs(fit$par[cnt])
cnt <- cnt + 1
}
res <- c(mu, delta, beta, alpha)
names(res) <- c("mu", "delta", "beta", "alpha")
res
#' @param beta skewness parameter, if fixed
#' @param delta scale parameter, if fixed
#' @param triangle logical. When TRUE, only the steepness and asymmetry values are returned.
#' @param ... additional parameters passed to optim.
#' @return estimated parameters
#' @details Method of moments estimators for NW parameters. The stats vector can contain NA values when parameters are fixed. If the mean is to be estimated, then \code{stats[1]} must be provided.
#' @import Matrix
#' @export
#' @examples
#' #not yet
nw_est_mom <- function(data=NULL, stats=NULL,
mu=NA, delta=NA, beta=NA, alpha=NA,
triangle=FALSE){
if(!is.null(data)){
zdata <- (data-mean(data))/sd(data)
stats <- c(mean(data), var(data), mean(zdata^3), mean(zdata^4))
}
# Figure out which moments to use
moments_requested <- which(c(is.na(mu), is.na(delta), is.na(beta), is.na(alpha)))
moments_provided  <- which(!is.na(stats))
if(length(moments_requested) > length(moments_provided)){
stop("Need more moments to estimate desired parameters")
}
if(moments_requested[1] == 1 & moments_provided[1] != 1){
stop("Cannot estimate mu without sample mean")
}
f2opt <- function(par, moments, mu=NA, delta=NA, beta=NA, alpha=NA, ...){
cnt <- 1
if(is.na(mu)){
mu <- par[cnt]
cnt <- cnt + 1
}
if(is.na(delta)){
delta <- exp(par[cnt])
cnt <- cnt + 1
}
if(is.na(beta)){
beta <- par[cnt]
cnt <- cnt + 1
}
if(is.na(alpha)){
alpha <- par[cnt]
}
if(alpha^2 < beta^2) return(1e7)
gamma <- sqrt(alpha^2 - beta^2)
m1 <- mu + delta*beta/gamma
m2 <- delta*alpha^2/gamma^3
m3 <- 3*beta/(alpha*sqrt(delta*gamma))
m4 <- 3 + 3*(1 + 4*beta^2)/(alpha^2*delta*gamma)
d1 <- d2 <- d3 <- d4 <- 0
if(!is.na(moments[1])){
d1 <- (m1 - moments[1])^2
}
if(!is.na(moments[2])){
d2 <- (m2 - moments[2])^2
}
if(!is.na(moments[3])){
d3 <- (m3 - moments[3])^2
}
if(!is.na(moments[4])){
d4 <- (m4 - moments[4])^2
}
return(d1 + d2 + d3 + d4)
}
par0 <- c(0, 0, 0, 1)[moments_requested]
fit <- optim(par0, fn=f2opt, moments= stats, mu=mu, delta=delta, beta=beta, alpha=alpha, ...)
if(fit$convergence != 0) warning("Optim may not have converged.")
cnt <- 1
if(1 %in% moments_requested){
mu <- fit$par[cnt]
cnt <- cnt + 1
}
if(2 %in% moments_requested){
delta <- exp(fit$par[cnt])
cnt <- cnt + 1
}
if(3 %in% moments_requested){
beta <- fit$par[cnt]
cnt <- cnt + 1
}
if(4 %in% moments_requested){
alpha <- abs(fit$par[cnt])
cnt <- cnt + 1
}
if(triangle){
gamma <-  sqrt(alpha^2 - beta^2)
steep <- 1/sqrt(1 + abs(gamma))
asymm <- beta*steep/alpha
res <- c(asymm, steep)
names(res) <- c("asymmetry", "steepness")
}else{
res <- c(mu, delta, beta, alpha)
names(res) <- c("mu", "delta", "beta", "alpha")
}
return(res)
}
x <- rgamma(100, 4, 2)
devtools::document()
devtools::document()
?nw_est_mom
nw_est_mom(stats=c(NA, NA, skew, kurt), mu=0, delta=1)
?optim
document()
devtools::document()
x <- rgamma(100, 4, 2)
skew <- mean(((x-mean(x))/sd(x))^3) # Sample skewness
kurt <- mean(((x-mean(x))/sd(x))^4) # Sample kurtosis
nw_est_mom(stats=c(NA, NA, skew, kurt), mu=0, delta=1)
nw_est_mom(stats=c(NA, NA, skew, kurt), mu=0, delta=1,
triangle=TRUE)
nw_est_mom(stats=c(NA, var(x), skew, kurt), mu=0, triangle=TRUE)
n <- 500
y <- rgamma(n, 3, 1.5) + rlnorm(n, 1, 0.5)
n <- 500
y <- rgamma(n, 3, 1.5) + rlnorm(n, 1, 0.5)
skew <- mean(((y-mean(y))/sd(y))^3) # Sample skewness
kurt <- mean(((y-mean(y))/sd(y))^4) # Sample kurtosis
nw_est_mom(stats=c(NA, NA, skew, kurt), mu=0, delta=1, triangle=TRUE)
nw_est_mom(stats=c(NA, var(y), skew, kurt), mu=0, triangle=TRUE)
n <- 500
y <- rgamma(n, 3, 1.5) + rlnorm(n, 1, 0.5)
skew <- mean(((y-mean(y))/sd(y))^3) # Sample skewness
kurt <- mean(((y-mean(y))/sd(y))^4) # Sample kurtosis
nw_est_mom(stats=c(NA, NA, skew, kurt), mu=0, delta=1, triangle=TRUE)
nw_est_mom(stats=c(NA, var(y), skew, kurt), mu=0, triangle=TRUE)
devtools::document()
?nw_est_mom
library(GBASS)
?gbass
library(GBASS)
?gbass
rgig2.vec
devtools::document()
rgig2.vec
rgig2.vec(-2, 0, 2:10)
rgig2.vec(-2, rep(0, 10), 2:10)
rgig2.vec(-2, 0, 2:10)
rgig2.vec(-2, 2:10, 0)
rgig2.vec(-2, 2:10, 1)
?rgig2.vec
?Vectorize
rgig2.vec_fh <- Vectorize(rgig2, c("p", "a"))
rgig2.vec_fh(runif(10, -3, -2), 1:10, 0)
rgig2.vec_fh(runif(10, -3, -2), 1:10, 0)
rgig2.vec_fh(runif(10, -3, -2), 1:10, 1)
rgig2.vec_fh(-runif(10, -3, -2), 1:10, 0)
document()
devtools::document()
32+47
40 + 0.48*1.178
40*1.48*1.178
37+55
92/2
46*1.48*1.178
40*1.48*1.78
46*1.48*1.78
46*1.48*.78
40*1.48*(0.78+0.17)
